% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{create_controller}
\alias{create_controller}
\title{Set Up a Controller for SLURM Jobs on COH Clusters}
\usage{
create_controller(
  name,
  slurm_cpus,
  slurm_mem_gigabytes,
  slurm_walltime_minutes = 720L,
  slurm_workers = 350L,
  slurm_partition = default_partition(),
  slurm_log_dir = "logs"
)
}
\arguments{
\item{name}{A unique identifier for the controller.}

\item{slurm_cpus}{Number of CPU cores allocated to each task.}

\item{slurm_mem_gigabytes}{Memory allocated to each task, in gigabytes.}

\item{slurm_walltime_minutes}{Maximum allowed execution time per task, in minutes. Defaults to 720 (12 hours).}

\item{slurm_workers}{Total number of parallel tasks the controller can handle. Defaults to 350.}

\item{slurm_partition}{SLURM partition for job submission. Default set by cluster. See \href{../reference/package-options.html}{package options} for defaults.}

\item{slurm_log_dir}{Path for storing SLURM logs when \code{option(hprcc.log_slurm = TRUE)}. Defaults to "logs" in the project directory.}
}
\value{
A \code{crew_controller} object, ready to manage SLURM job submissions and monitoring.
}
\description{
Configures and initializes a
\href{https://wlandau.github.io/crew.cluster/reference/crew_controller_slurm.html}{\code{controller}}
for managing SLURM jobs on City of Hope clusters using the
\{\href{https://wlandau.github.io/crew.cluster/}{\code{crew.cluster}}\} package to facilitate job
execution, managing resources such as CPU, memory, walltime, and writing SLURM logs and scripts.
}
\details{
\code{create_controller} streamlines SLURM job setup on COH clusters using
Singularity containers for consistent computing environments. Singularity containers
package software and dependencies, ensuring that jobs run reliably across both
clusters. This approach aids in computational reproducibility and
solves environment inconsistencies between Apollo and Gemini.

The function allows customization of SLURM job parameters, including CPUs, memory,
and walltime, while managing SLURM logs and script directories. It abstracts cluster-specific
configurations, making it easier to run jobs without detailed knowledge of the underlying
cluster setup. This functionality is especially useful in environments with varying
resource paths and setups, simplifying job execution across the two platforms.
}
\examples{
if (interactive()) {
  create_controller("my_controller", slurm_cpus = 4, slurm_gigabytes = 8)
}
}
\seealso{
\code{\link[crew.cluster]{crew_controller_slurm}} for more on SLURM controllers.
}
